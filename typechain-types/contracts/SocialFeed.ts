/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace SocialFeed {
  export type CommentStruct = {
    commenter: AddressLike;
    content: string;
    timestamp: BigNumberish;
  };

  export type CommentStructOutput = [
    commenter: string,
    content: string,
    timestamp: bigint
  ] & { commenter: string; content: string; timestamp: bigint };

  export type PostStruct = {
    id: BigNumberish;
    author: AddressLike;
    content: string;
    likeCount: BigNumberish;
    commentCount: BigNumberish;
    tipAmount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type PostStructOutput = [
    id: bigint,
    author: string,
    content: string,
    likeCount: bigint,
    commentCount: bigint,
    tipAmount: bigint,
    timestamp: bigint
  ] & {
    id: bigint;
    author: string;
    content: string;
    likeCount: bigint;
    commentCount: bigint;
    tipAmount: bigint;
    timestamp: bigint;
  };
}

export interface SocialFeedInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commentOnPost"
      | "comments"
      | "commentsReceived"
      | "createPost"
      | "getComments"
      | "getPost"
      | "getReputation"
      | "likePost"
      | "liked"
      | "likesReceived"
      | "postCount"
      | "posts"
      | "tipPost"
      | "tipPostERC20"
      | "tipsReceived"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CommentAdded"
      | "PostCreated"
      | "PostLiked"
      | "TipERC20Sent"
      | "TipSent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "commentOnPost",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "comments",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "commentsReceived",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "createPost", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getComments",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "likePost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liked",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "likesReceived",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "postCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "posts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "tipPost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tipPostERC20",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tipsReceived",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "commentOnPost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comments", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commentsReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getComments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "likePost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "likesReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tipPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tipPostERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tipsReceived",
    data: BytesLike
  ): Result;
}

export namespace CommentAddedEvent {
  export type InputTuple = [
    postId: BigNumberish,
    commentId: BigNumberish,
    commenter: AddressLike,
    content: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    postId: bigint,
    commentId: bigint,
    commenter: string,
    content: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    postId: bigint;
    commentId: bigint;
    commenter: string;
    content: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostCreatedEvent {
  export type InputTuple = [
    postId: BigNumberish,
    author: AddressLike,
    content: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    postId: bigint,
    author: string,
    content: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    postId: bigint;
    author: string;
    content: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostLikedEvent {
  export type InputTuple = [
    postId: BigNumberish,
    liker: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [postId: bigint, liker: string, timestamp: bigint];
  export interface OutputObject {
    postId: bigint;
    liker: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipERC20SentEvent {
  export type InputTuple = [
    postId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    token: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    postId: bigint,
    from: string,
    to: string,
    token: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    postId: bigint;
    from: string;
    to: string;
    token: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TipSentEvent {
  export type InputTuple = [
    postId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    postId: bigint,
    from: string,
    to: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    postId: bigint;
    from: string;
    to: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SocialFeed extends BaseContract {
  connect(runner?: ContractRunner | null): SocialFeed;
  waitForDeployment(): Promise<this>;

  interface: SocialFeedInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commentOnPost: TypedContractMethod<
    [postId: BigNumberish, content: string],
    [void],
    "nonpayable"
  >;

  comments: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        commenter: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  commentsReceived: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  createPost: TypedContractMethod<[content: string], [void], "nonpayable">;

  getComments: TypedContractMethod<
    [postId: BigNumberish],
    [SocialFeed.CommentStructOutput[]],
    "view"
  >;

  getPost: TypedContractMethod<
    [id: BigNumberish],
    [SocialFeed.PostStructOutput],
    "view"
  >;

  getReputation: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  likePost: TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;

  liked: TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;

  likesReceived: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  postCount: TypedContractMethod<[], [bigint], "view">;

  posts: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        author: string;
        content: string;
        likeCount: bigint;
        commentCount: bigint;
        tipAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  tipPost: TypedContractMethod<[postId: BigNumberish], [void], "payable">;

  tipPostERC20: TypedContractMethod<
    [postId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  tipsReceived: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commentOnPost"
  ): TypedContractMethod<
    [postId: BigNumberish, content: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "comments"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        commenter: string;
        content: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "commentsReceived"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "createPost"
  ): TypedContractMethod<[content: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getComments"
  ): TypedContractMethod<
    [postId: BigNumberish],
    [SocialFeed.CommentStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPost"
  ): TypedContractMethod<
    [id: BigNumberish],
    [SocialFeed.PostStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "likePost"
  ): TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "liked"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "likesReceived"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "postCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "posts"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint, bigint, bigint, bigint] & {
        id: bigint;
        author: string;
        content: string;
        likeCount: bigint;
        commentCount: bigint;
        tipAmount: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tipPost"
  ): TypedContractMethod<[postId: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "tipPostERC20"
  ): TypedContractMethod<
    [postId: BigNumberish, token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "tipsReceived"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  getEvent(
    key: "CommentAdded"
  ): TypedContractEvent<
    CommentAddedEvent.InputTuple,
    CommentAddedEvent.OutputTuple,
    CommentAddedEvent.OutputObject
  >;
  getEvent(
    key: "PostCreated"
  ): TypedContractEvent<
    PostCreatedEvent.InputTuple,
    PostCreatedEvent.OutputTuple,
    PostCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PostLiked"
  ): TypedContractEvent<
    PostLikedEvent.InputTuple,
    PostLikedEvent.OutputTuple,
    PostLikedEvent.OutputObject
  >;
  getEvent(
    key: "TipERC20Sent"
  ): TypedContractEvent<
    TipERC20SentEvent.InputTuple,
    TipERC20SentEvent.OutputTuple,
    TipERC20SentEvent.OutputObject
  >;
  getEvent(
    key: "TipSent"
  ): TypedContractEvent<
    TipSentEvent.InputTuple,
    TipSentEvent.OutputTuple,
    TipSentEvent.OutputObject
  >;

  filters: {
    "CommentAdded(uint256,uint256,address,string,uint256)": TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;
    CommentAdded: TypedContractEvent<
      CommentAddedEvent.InputTuple,
      CommentAddedEvent.OutputTuple,
      CommentAddedEvent.OutputObject
    >;

    "PostCreated(uint256,address,string,uint256)": TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;
    PostCreated: TypedContractEvent<
      PostCreatedEvent.InputTuple,
      PostCreatedEvent.OutputTuple,
      PostCreatedEvent.OutputObject
    >;

    "PostLiked(uint256,address,uint256)": TypedContractEvent<
      PostLikedEvent.InputTuple,
      PostLikedEvent.OutputTuple,
      PostLikedEvent.OutputObject
    >;
    PostLiked: TypedContractEvent<
      PostLikedEvent.InputTuple,
      PostLikedEvent.OutputTuple,
      PostLikedEvent.OutputObject
    >;

    "TipERC20Sent(uint256,address,address,address,uint256,uint256)": TypedContractEvent<
      TipERC20SentEvent.InputTuple,
      TipERC20SentEvent.OutputTuple,
      TipERC20SentEvent.OutputObject
    >;
    TipERC20Sent: TypedContractEvent<
      TipERC20SentEvent.InputTuple,
      TipERC20SentEvent.OutputTuple,
      TipERC20SentEvent.OutputObject
    >;

    "TipSent(uint256,address,address,uint256,uint256)": TypedContractEvent<
      TipSentEvent.InputTuple,
      TipSentEvent.OutputTuple,
      TipSentEvent.OutputObject
    >;
    TipSent: TypedContractEvent<
      TipSentEvent.InputTuple,
      TipSentEvent.OutputTuple,
      TipSentEvent.OutputObject
    >;
  };
}
